{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# INVENTORY MANAGEMENT TECHNIQUES AND PERFORMANCE OF PUBLIC HEALTH HOSPITALS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Study Topic\n",
    "#INFLUENCE OF INVENTORY MANAGEMENT TECHNIQUES ON THE PERFORMANCE OF PUBLIC HEALTH HOSPITALS IN KISUMU COUNTY, KENYA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Objectives of the study \n",
    "#i.To establish the influence of just in time technique on the performance of public health hospitals in Kisumu County\n",
    "#ii.To establish the influence of ABC analysis technique on the performance of public health hospitals in Kisumu County \n",
    "#iii.To establish the influence of EOQ model on the performance of public health hospitals in Kisumu County"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Study Hypotheses \n",
    "#i.H0:There is no significant relationship between just in time technique and performance of public health hospitals in Kisumu County\n",
    "#ii.H0:There is no significant relationship between ABC analysis technique and performance of public health hospitals in Kisumu County\n",
    "#iii.H0:There is no significant relationship between EOQ model and the performance of public health hospitals in Kisumu County "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing the library \n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing the data\n",
    "df=pd.read_csv('ServiceDelivery.csv')\n",
    "X=df.iloc[:,0:-1]\n",
    "y=df.iloc[:,-1]\n",
    "#X=df.drop('ServiceDelivery',1)\n",
    "#y=df[['ServiceDelivery']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "JustInTime          19.790055\n",
       "ABCModel            21.165746\n",
       "EOQ                 19.944751\n",
       "ServiceDelivery     18.812155\n",
       "dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking the mean \n",
    "df.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>JustInTime</th>\n",
       "      <th>ABCModel</th>\n",
       "      <th>EOQ</th>\n",
       "      <th>ServiceDelivery</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>22</td>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>19</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>176</td>\n",
       "      <td>18</td>\n",
       "      <td>17</td>\n",
       "      <td>20</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>177</td>\n",
       "      <td>22</td>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>178</td>\n",
       "      <td>22</td>\n",
       "      <td>24</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>179</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>17</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>180</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>181 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     JustInTime  ABCModel  EOQ  ServiceDelivery \n",
       "0            20        22   16                17\n",
       "1            22        20   20                18\n",
       "2            23        25   25                21\n",
       "3            19        22   21                15\n",
       "4            20        21   20                19\n",
       "..          ...       ...  ...               ...\n",
       "176          18        17   20                15\n",
       "177          22        25   20                16\n",
       "178          22        24   21                22\n",
       "179          19        21   17                19\n",
       "180          22        21   22                21\n",
       "\n",
       "[181 rows x 4 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filling the NaNs with mean\n",
    "df.fillna(df.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>JustInTime</th>\n",
       "      <th>ABCModel</th>\n",
       "      <th>EOQ</th>\n",
       "      <th>ServiceDelivery</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>22</td>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>19</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   JustInTime  ABCModel  EOQ  ServiceDelivery \n",
       "0          20        22   16                17\n",
       "1          22        20   20                18\n",
       "2          23        25   25                21\n",
       "3          19        22   21                15\n",
       "4          20        21   20                19"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting to understand the data\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>JustInTime</th>\n",
       "      <th>ABCModel</th>\n",
       "      <th>EOQ</th>\n",
       "      <th>ServiceDelivery</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>181.000000</td>\n",
       "      <td>181.000000</td>\n",
       "      <td>181.000000</td>\n",
       "      <td>181.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>19.790055</td>\n",
       "      <td>21.165746</td>\n",
       "      <td>19.944751</td>\n",
       "      <td>18.812155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>2.562575</td>\n",
       "      <td>2.570157</td>\n",
       "      <td>2.626201</td>\n",
       "      <td>2.613654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>14.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>17.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>19.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       JustInTime    ABCModel         EOQ  ServiceDelivery \n",
       "count  181.000000  181.000000  181.000000        181.000000\n",
       "mean    19.790055   21.165746   19.944751         18.812155\n",
       "std      2.562575    2.570157    2.626201          2.613654\n",
       "min     11.000000   15.000000   11.000000         14.000000\n",
       "25%     18.000000   20.000000   18.000000         17.000000\n",
       "50%     20.000000   21.000000   20.000000         19.000000\n",
       "75%     22.000000   23.000000   21.000000         20.000000\n",
       "max     24.000000   25.000000   25.000000         25.000000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Exploring the data,descriptive analysis\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>JustInTime</th>\n",
       "      <th>ABCModel</th>\n",
       "      <th>EOQ</th>\n",
       "      <th>ServiceDelivery</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>JustInTime</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.483584</td>\n",
       "      <td>0.326820</td>\n",
       "      <td>0.516648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ABCModel</td>\n",
       "      <td>0.483584</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.332241</td>\n",
       "      <td>0.524861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>EOQ</td>\n",
       "      <td>0.326820</td>\n",
       "      <td>0.332241</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.373222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ServiceDelivery</td>\n",
       "      <td>0.516648</td>\n",
       "      <td>0.524861</td>\n",
       "      <td>0.373222</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  JustInTime  ABCModel       EOQ  ServiceDelivery \n",
       "JustInTime          1.000000  0.483584  0.326820          0.516648\n",
       "ABCModel            0.483584  1.000000  0.332241          0.524861\n",
       "EOQ                 0.326820  0.332241  1.000000          0.373222\n",
       "ServiceDelivery     0.516648  0.524861  0.373222          1.000000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Exploring the data,correlation analysis\n",
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing seaborn library \n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1a20eeae10>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 20 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Exploring the data,visualizing with seaborn\n",
    "sns.pairplot(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing sklearn to split the data\n",
    "import sklearn\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the data into train and test sets\n",
    "X_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.8,test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing statsmodels \n",
    "import statsmodels \n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula as smf\n",
    "from statsmodels.formula.api import ols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                 OLS Regression Results                                \n",
      "=======================================================================================\n",
      "Dep. Variable:       ServiceDelivery    R-squared (uncentered):                   0.988\n",
      "Model:                            OLS   Adj. R-squared (uncentered):              0.988\n",
      "Method:                 Least Squares   F-statistic:                              4006.\n",
      "Date:                Sat, 02 Jan 2021   Prob (F-statistic):                   3.26e-136\n",
      "Time:                        21:24:42   Log-Likelihood:                         -308.08\n",
      "No. Observations:                 144   AIC:                                      622.2\n",
      "Df Residuals:                     141   BIC:                                      631.1\n",
      "Df Model:                           3                                                  \n",
      "Covariance Type:            nonrobust                                                  \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "JustInTime     0.3460      0.072      4.815      0.000       0.204       0.488\n",
      "ABCModel       0.3518      0.073      4.827      0.000       0.208       0.496\n",
      "EOQ            0.2273      0.062      3.638      0.000       0.104       0.351\n",
      "==============================================================================\n",
      "Omnibus:                        1.330   Durbin-Watson:                   1.911\n",
      "Prob(Omnibus):                  0.514   Jarque-Bera (JB):                1.324\n",
      "Skew:                          -0.227   Prob(JB):                        0.516\n",
      "Kurtosis:                       2.880   Cond. No.                         19.1\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "#Describing the model\n",
    "mod= sm.OLS(y_train, X_train)\n",
    "# Fitting the model\n",
    "res = mod.fit()   \n",
    "# Summarizing the model\n",
    "print(res.summary()) "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
